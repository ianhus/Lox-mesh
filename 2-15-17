#################################################
###############      Lox 2.0      ###############
#### After Meselhe, Arceneaux, Waldon (2010) ####
#################################################

# Clear all variables before new model run #
rm(list=ls(all=TRUE))
tick <- Sys.time()
setwd("E:/Kati/Lox/LoxMods") #/Volumes/IKH/Kati/Lox/LoxMods 

## I'm using data from 2005-2015 because 1/1/05 had lots of stage data 
## from which to interpolate an intitial water surface, and 10+ years
## seemed like an adequate period of time for model creation.

## Read in inflows and outflows ##
Q <- read.csv("Flows05-.csv")/35.3  #[m3s-1]               
Q[is.na(Q)] <- 0                    #replaces NA with 0      
P <- read.csv("Rain05-.csv")*0.0254 #[m]   
P[is.na(P)] <- 0                    #replaces NA with 0 
ET <- read.csv("ET05-.csv")/1000    #[m]      
ET[is.na(ET)] <- 0                  #replaces NA with 0 
grid.data <- read.csv("WCA_Model_Data.csv")  #the attributes of each grid cell
pos.flow <- read.csv("UTM-flow.csv")         #the coordinates of each flow structure
pos.stage <- read.csv("UTM-stage.csv")       #the coordinates of each stage gauge
stage <- read.csv("Stage05-.csv")/3.28       #measured daily mean stage at each marsh gauge [m]
adj <- read.csv("adj-400.csv", sep = "")     #the adjacency matrix created below

## Define constants and parameters ##
grids <- 400      #grid size (spacing or edge length) [m]
area <- grids^2   #area of each grid cell
ncell <- nrow(grid.data)
B <- 30           #Calibrated transport coeff taken from Mike, converted to metric [m-1*d-1]
C <- 2E3*B        #Inter-cellular water transfer coeff [m-1*hr-1] !!(unsure whether that should be 2 or 2pi, Mike used 2pi)
GM <- 0.001315    #Marsh seepage constant [d-1] ~from Mike
StgB <- 3.5       #Boundary water surface elevation for seepage [m]   ~from Mike
f.ET.min <- 0.2   #Minimum ET reduction factor   ~from Mike
H.ET <- 0.25      #Depth at/below which ET is reduced [m] ; H = max(0,StgM-E0)  ~from Mike
ds.max <- 0.0305  #maximum stage change per day [m]

## Create vector of elevations for each grid cell ##
elevs <- grid.data$elev_ft_NG/3.28           #cell elevations [m]

## Create an empty stage vector for each cell ## code modified from "akrun" on stackoverflow :http://stackoverflow.com/questions/28221755/how-to-split-a-r-data-frame-into-vectors-unbind
stage.day <- matrix(nrow = 366, ncol = ncell) #a column for each cell, a row for each day
stage.day[1,] <- grid.data$StgJan05/3.28 #set the first stage equal to the initial value (1/1/05)
#list2env(setNames(split(init, col(init)), paste0("stage.",1:ncol(init))), envir=.GlobalEnv) #split 'init' by column and give each a name
#rm(init) #removes the huge matrix that we no longer need <--------May need to keep it and get rid of individuals

## Find cell nearest to each stage gauge ##
f2 <- NULL
for (i in 1:nrow(pos.stage)) { #for each stage gauge listed
  f1 <- NULL
  for (j in 1:ncell) { #measure the distance to each grid cell
    f1[j] <- sqrt((pos.stage$Yutm[i] - grid.data$Yutm[j])^2 + (pos.stage$Xutm[i] - grid.data$Xutm[j])^2)
  }
  f2[i] <- which.min(f1) #store the grid that is closest to each structure
}

## Find cell nearest to each inflow or outflow structure ##
g2 <- NULL
for (i in 1:nrow(pos.flow)) { #for each flow structure listed
  g1 <- NULL
  for (j in 1:ncell) { #measure the distance to each grid cell
    g1[j] <- sqrt((pos.flow$Yutm[i] - grid.data$Yutm[j])^2 + (pos.flow$Xutm[i] - grid.data$Xutm[j])^2)
  }
  g2[i] <- which.min(g1) #store the grid that is closest to each structure
}

for (d in 1:365) {   ########changed this temporarily to avoid a 'subscript out of bounds'
  d.stage <- mat.or.vec(ncell, 1)
  for (c in 1:ncell) {
    
    if (stage.day[d,c] - elevs[c] < H.ET) {                 #invoke ET reduction contingency if necessary
      
      ET[d,1] <- ET[d,1]*max(f.ET.min, min(1,(max(0,stage.day[d,c] - elevs[c]))/H.ET))      #proportionally reduce ET as water level approaches ground level, from Mike
      
    }
    d.stage[c] <- P[d,1] - GM*(stage.day[d,c] - StgB) - ET[d,1] #calculate incremental change in stage 
    
    if (c %in% g2) {                 #if current cell is nearest a flow structure(s), give/take its flow
      d.stage[c] <- d.stage[c] + Q[d,match(c,g2)]*86400/area         #find appropriate flow rate [cfs] based on day and grid cell, convert to meters to find stage change
    }
    
    if (abs(d.stage[c]) > ds.max) {   #0.1m set as max daily stage change for cell
      
      d..stage <- d.stage[c]/abs(d.stage[c])*ds.max
      stage.day[d,c] <- stage.day[d,c] + d..stage
      d.stage[-c] <- (d.stage[c] - d..stage)/(ncell - 1)   #found mistake...had (max(c) - 1) instead of nrow..
      
    } else {
      stage.day[d,c] <- stage.day[d,c] + d.stage[c] #update stage for current cell in current day
      }
    
    if (stage.day[d,c] > elevs[c]) {
      
      ## Find water surface elevation difference between adjacent cells ##
      drop <- matrix(nrow = 8, ncol = 1)
      for (m in 1:8) {
        drop[m] <- stage.day[d,c] - max(stage.day[d,adj[m,c]], elevs[adj[m,c]]) #find drop to stage or elev, whichever is higher
      }
      drop[is.na(drop)] <- -9999       #re-assigning NAs to work with logical statements

      ## Find relative slope between adjacent cells ##
      if (max(drop) > 0.0001) {        #If there is positive slope from current cell, distribute water from cell
        slope <- matrix(nrow = 8, ncol = 1)
        for (n in c(1,3,5,7)) {        #for adjacent "corners", the distance is greater
          slope[n] <- drop[n]/sqrt(2)
        }
        for (nn in c(2,4,6,8)) {       #"cardinal" neighbors have weight of 1
          slope[nn] <- drop[nn]
        }
        for (s in 1:length(slope)) {   #re-re-assign NAs to find proportion of slope (and flow) to allot to each downhill neighbor
          if (slope[s] < 0) {
            slope[s] <- 0
          }
        }
        prop <- matrix(nrow = 8, ncol = 1)
        for (p in 1:length(slope)) {   #find the portion of "total slope" for each downhill cell
          prop[p] <- slope[p]/sum(slope)
        }
        #My idea is to determine total outflow based on the largest head difference, then allocate
        #that flow proportionally based on the head gradients with the downhill neighbors
        Q.coeff <- cbind(prop,adj[,c])     #link proportion of flow to corresponding neighbors
        Q.tot <- C*max(0,(stage.day[d,c] - elevs[c]))^3*(max(drop)) #"power law" relationship for total flow, after Mike, after K&K
        d.stage[c] <- d.stage[c] - Q.tot/area #do I need to adulterate this d.stage too?
        for (q in 1:8) {
          d.stage[Q.coeff[q,2]] <- d.stage[Q.coeff[q,2]] + Q.tot*Q.coeff[q,1]/area
        }
        
      } #if there is at least one positive drop
      
    }   #if there is standing water in current cell
  
  }   #for every cell
  stage.day[d+1,] <- stage.day[d,] + d.stage
}     #for every day
tock <- Sys.time()
runtime <- tock - tick

#plot(stage[1:100,6])#, ylim = range(4.5,5.5))
#lines(stage.day[1:100,2974])
plot(stage[1:365,2], ylim = range(4.6,5.4), xlab = "Day", ylab = "Stage [m]", main = "Measured (o) and Modelled (-) Stage at 1-7")
lines(stage.day[1:365,1457])
#plot(stage[1:365,5], ylim = range(4.6,5.4), xlab = "Day", ylab = "Stage [m]", main = "Measured (o) and Modelled (-) Stage at 1-9")
#lines(stage.day[1:365,2467])
#plot(stage.day[1:30,3502])
#plot(stage.day[1:30,492])


#write.table(cbind(stage[1:365,2],stage.day[1:365,1457]), file = paste("1-7_365.csv", sep = ""))
#write.table(cbind(stage[1:100,3],stage.day[1:100,1874]), file = paste("1-8T_100.csv", sep = ""))
#write.table(cbind(stage[1:100,5],stage.day[1:100,2467]), file = paste("1-9_100.csv", sep = ""))
